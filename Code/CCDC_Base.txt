/*

This code has parts. The aim is to detect change using CCDC algorithm.
This code is based in the code developed by Boston University: 
Ar√©valo, P., Bullock, E.L., Woodcock, C.E., Olofsson, P., 2020. A Suite of Tools for Continuous Land Change Monitoring in Google Earth Engine. Front. Clim. 2, 576740. https://doi.org/10.3389/fclim.2020.576740

The code is available in: https://www.openmrv.org/es/w/modules/mrv/modules_2/continuous-change-detection-and-classification-ccdc
However, it was modified considering our needy

*/

//////////////////////////////////
// First part: Upload your layers
//////////////////////////////////
// You have to upload the layer of study. In this case, it is "control". Vectorial layers are available in the folder called "Layers"

var studyRegion= control;
// We can see this plots using the follow code:

Map.addLayer(studyRegion);
Map.centerObject(studyRegion);

//////////////////////////////////
// Second part: Set CCDC parameters
//////////////////////////////////

var changeDetectionParameters = {
  // Which band/index or combination will you use?... in this case SR_B7 and SR_B6, that is to say SWIR2 and SWIR1
  breakpointBands: ['SR_B7','SR_B6'],
  // The default parameters that we used
  minObservations: 3,
  chiSquareProbability: 0.99,
  minNumOfYearsScaler: 1.33,
  dateFormat: 1,
  lambda: 0.002,
  maxIterations: 25000
};

//////////////////////////////////
// Third part: Satellite image processing
//////////////////////////////////


// Set the date 
var inputParams = {
  start: '2015-04-01',
  end: '2022-12-31',
};

// Select the sensor and calculate the index
function imagen (especie) {
  return  ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")  // We used Landsat 8 Collection 2
                            .filterDate('2015-04-01', '2022-12-31') // Set the date
                            .filterMetadata("CLOUD_COVER","less_than", 50) // Select cloud percentage
                            .map(maskL8sr) // Add cloud and snow mask
                            .filterBounds(especie) // Get images of the study area only
                            .map(angi); //add shadows mask
                            .map(function addNBR(image) { //This allows you to calculated different vagetation index
    var NBRI= image.expression ('((NIR - SWIR)+0.000000000000000000001) / (NIR + SWIR)', {
    'NIR': image.select ('SR_B5'),  
    'SWIR': image.select ('SR_B7')}).rename('NBR');
    
    var tcb= image.expression('(B2*0.3029)+(B3*0.2786)+(B4*0.4733)+(B5*0.5599)+(B6*0.508)+(B7*0.1872)',{
      'B2':image.select('SR_B2'),
      'B3':image.select('SR_B3'),
      'B4':image.select('SR_B4'),
      'B5':image.select('SR_B5'),
      'B6':image.select('SR_B6'),
      'B7':image.select('SR_B7')}).rename('tcb');
   
    var tcg= image.expression('(B2*-0.2941)+(B3*-0.243)+(B4*-0.5424)+(B5*0.7276)+(B6*0.0713)+(B7*-0.1608)',{
      'B2':image.select('SR_B2'),
      'B3':image.select('SR_B3'),
      'B4':image.select('SR_B4'),
      'B5':image.select('SR_B5'),
      'B6':image.select('SR_B6'),
      'B7':image.select('SR_B7')}).rename('tcg');
     
    var tcw= image.expression('(B2*0.1511)+(B3*-0.1973)+(B4*0.3283)+(B5*0.3407)+(B6*-0.7117)+(B7*-0.4559)',{
      'B2':image.select('SR_B2'),
      'B3':image.select('SR_B3'),
      'B4':image.select('SR_B4'),
      'B5':image.select('SR_B5'),
      'B6':image.select('SR_B6'),
      'B7':image.select('SR_B7')}).rename('tcw');  
    return image.addBands([NBRI,tcb,tcg,tcw])}); 
}

// Cloud and snow mask
function maskL8sr(image) {

  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var qualityBand= image.select('QA_PIXEL');

  var saturationMask = image.select('QA_RADSAT').eq(0);
  var NDSI = image.expression ('(Verde - SWIR) / (Verde + SWIR)', {
    'Verde': image.select ('SR_B3'),  
    'SWIR': image.select ('SR_B6')}).rename('NDSI');
  var NDSI_mask=NDSI.lt(0.4);

  // Apply the scaling factors to the appropriate bands.
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);

  // Replace the original bands with the scaled ones and apply the masks.
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask)
      .updateMask(NDSI_mask)
      .clip(studyRegion) // Clip the images with the plot shape

      ;
}

// Shadows mask

var degree2radian = ee.Image(0.0174533);

function angi (imagen){

// Use a DEM
var terrain=ee.Image("projects/giambellucalalansat/assets/DEM_ASTER_V3_Navarra");
var slope =  ee.Terrain.slope (terrain); 

var aspect =  ee.Terrain.aspect (terrain);  
  
//Extract slope in radians for each pixel in the image  
var p = slope.multiply(degree2radian);
//Extract solar zenith angle from the image
var elev=ee.Number(imagen.get('SUN_ELEVATION'));
var elevacion=ee.Image(elev);
var noventa=ee.Image(90.0);
var zenital = imagen.expression(
    'noventa - elevacion', {
      'noventa':noventa,
      'elevacion': elevacion,
}).rename('zenital');
var z = zenital.multiply(degree2radian);
//Extract solar azimuth from the image
var azis = ee.Number(imagen.get('SUN_AZIMUTH'));
var azi= ee.Image(azis);
var az = azi.multiply(degree2radian);
//Extract aspect in radians for each pixel in the image
var o = aspect.multiply(degree2radian);
//Calculate the cosine of the local solar incidence for every pixel in the image in radians
var cosi = ee.Image(imagen.expression(
  '(cosp*cosz) + (sinp*sinz*(cos(az - o)))', 
{
  'cosp': p.cos(),
  'cosz': z.cos(),
  'sinp': p.sin(),
  'sinz': z.sin(),
  'az' : az,
  'o' : o,
  'cos(az-o)': (az.subtract(o)).cos()
})).rename('cosi')
;

var mask = cosi.gt(0);
var opticalB1=imagen.select('SR_B1').gt(0);
var opticalB2=imagen.select('SR_B2').gt(0);
var opticalB3=imagen.select('SR_B3').gt(0);
var opticalB4=imagen.select('SR_B4').gt(0);
var opticalB5=imagen.select('SR_B5').gt(0);
var opticalB6=imagen.select('SR_B6').gt(0);
var opticalB7=imagen.select('SR_B7').gt(0);
  
return imagen.updateMask(opticalB5)
  .updateMask(opticalB7)
  .updateMask(opticalB1)
  .updateMask(opticalB2)
  .updateMask(opticalB3)
  .updateMask(opticalB4)
  .updateMask(opticalB6)
  .updateMask(mask);
}

// Obtein the filtered and masked collection 
var filteredLandsat=imagen(studyRegion);

//////////////////////////////////
// Fourth part: Set CCDC parameters
//////////////////////////////////


 // Select the band/index that will be use to detect changes
changeDetectionParameters.collection = filteredLandsat.select('SR_B7','SR_B6');

// Run CCDC
var results = ee.Algorithms.TemporalSegmentation.Ccdc(changeDetectionParameters);

print('ccdc',results);

// Create dictionary to export
var paramsCombined = ee.Dictionary(changeDetectionParameters).combine(inputParams).remove(['collection']);

//Export raster to GEE

Export.image.toAsset({
  image: results.setMulti(paramsCombined),
  scale: 30,
  description: 'CCDC',
  maxPixels: 1e13,
  region: studyRegion,
  assetId: 'CCDC',
  pyramidingPolicy: {
    '.default': 'sample'
  }
});

// The output of this code is a raster multilevel where you could find information of: date, magnitude, probability, number of observation of changes for each pixel
// The next step is in CCDC_Raster_Conditioning
